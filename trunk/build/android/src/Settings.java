// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package org.wormux;

import android.app.Activity;
import android.content.Context;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.view.Window;
import android.view.WindowManager;
import android.widget.TextView;
import android.util.Log;
import java.io.*;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.os.Environment;
import android.os.StatFs;
import java.util.Locale;
import java.util.ArrayList;
import java.util.zip.GZIPInputStream;

import android.content.Context;
import android.content.res.Configuration;
import android.content.res.Resources;
import java.lang.String;

class Settings
{
  static String SettingsFileName = "libsdl-settings.cfg";

  static AlertDialog changeConfigAlert = null;
  static Thread changeConfigAlertThread = null;
  static boolean settingsLoaded = false;

  static void Save(final MainActivity p)
  {
    try {
      ObjectOutputStream out = new ObjectOutputStream(p.openFileOutput( SettingsFileName, p.MODE_WORLD_READABLE ));
      out.writeBoolean(Globals.DownloadToSdcard);
      out.writeBoolean(Globals.PhoneHasArrowKeys);
      out.writeBoolean(Globals.PhoneHasTrackball);
      out.writeBoolean(Globals.UseAccelerometerAsArrowKeys);
      out.writeInt(Globals.AccelerometerSensitivity);
      out.writeInt(Globals.TrackballDampening);
      out.writeInt(Globals.AudioBufferConfig);
      out.close();
      settingsLoaded = true;

    } catch( FileNotFoundException e ) {
    } catch( SecurityException e ) {
    } catch ( IOException e ) {};
  }

  static void Load( final MainActivity p )
  {
    if(settingsLoaded) // Prevent starting twice
    {
      startDownloader(p);
      return;
    }
    try {
      ObjectInputStream settingsFile = new ObjectInputStream(new FileInputStream( p.getFilesDir().getAbsolutePath() + "/" + SettingsFileName ));
      Globals.DownloadToSdcard = settingsFile.readBoolean();
      Globals.PhoneHasArrowKeys = settingsFile.readBoolean();
      Globals.PhoneHasTrackball = settingsFile.readBoolean();
      Globals.UseAccelerometerAsArrowKeys = settingsFile.readBoolean();
      Globals.AccelerometerSensitivity = settingsFile.readInt();
      Globals.TrackballDampening = settingsFile.readInt();
      Globals.AudioBufferConfig = settingsFile.readInt();

      settingsLoaded = true;

      AlertDialog.Builder builder = new AlertDialog.Builder(p);
      builder.setTitle(p.getResources().getString(R.string.device_config));
      builder.setPositiveButton(p.getResources().getString(R.string.device_change_cfg),
                                new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface dialog, int item)
        {
            changeConfigAlert = null;
            dialog.dismiss();
            showDownloadConfig(p);
        }
      });
      /*
      builder.setNegativeButton("Start", new DialogInterface.OnClickListener()
      {
        public void onClick(DialogInterface dialog, int item)
        {
            changeConfigAlert = null;
            dialog.dismiss();
            startDownloader(p);
        }
      });
      */
      AlertDialog alert = builder.create();
      alert.setOwnerActivity(p);
      changeConfigAlert = alert;

      class Callback implements Runnable
      {
        MainActivity p;
        Callback( MainActivity _p ) { p = _p; }
        public void run()
        {
          try {
            Thread.sleep(1500);
          } catch( InterruptedException e ) {};
          if( changeConfigAlert == null )
            return;
          changeConfigAlert.dismiss();
          startDownloader(p);
        }
      };
      changeConfigAlertThread = new Thread(new Callback(p));
      changeConfigAlertThread.start();

      alert.show();

      return;

    } catch( FileNotFoundException e ) {
    } catch( SecurityException e ) {
    } catch ( IOException e ) {};

    // This code fails for both of my phones!
    /*
    Configuration c = new Configuration();
    c.setToDefaults();

    if( c.navigation == Configuration.NAVIGATION_TRACKBALL ||
      c.navigation == Configuration.NAVIGATION_DPAD ||
      c.navigation == Configuration.NAVIGATION_WHEEL )
    {
      Globals.AppNeedsArrowKeys = false;
    }

    System.out.println( "libSDL: Phone keypad type: " +
        (
        c.navigation == Configuration.NAVIGATION_TRACKBALL ? "Trackball" :
        c.navigation == Configuration.NAVIGATION_DPAD ? "Dpad" :
        c.navigation == Configuration.NAVIGATION_WHEEL ? "Wheel" :
        c.navigation == Configuration.NAVIGATION_NONAV ? "None" :
        "Unknown" ) );
    */

    showDownloadConfig(p);
  }

  static void showDownloadConfig(final MainActivity p) {

    long freeSdcard = 0;
    long freePhone = 0;
    try {
      StatFs sdcard = new StatFs(Environment.getExternalStorageDirectory().getPath());
      StatFs phone = new StatFs(Environment.getDataDirectory().getPath());
      freeSdcard = (long)sdcard.getAvailableBlocks() * sdcard.getBlockSize() / 1024 / 1024;
      freePhone = (long)phone.getAvailableBlocks() * phone.getBlockSize() / 1024 / 1024;
    }catch(Exception e) {}

    final CharSequence[] items = { p.getResources().getString(R.string.storage_phone, freePhone),
                                   p.getResources().getString(R.string.storage_sd, freeSdcard) };

    AlertDialog.Builder builder = new AlertDialog.Builder(p);
    builder.setTitle(p.getResources().getString(R.string.storage_question));
    builder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface dialog, int item)
      {
        Globals.DownloadToSdcard = (item == 1);

        dialog.dismiss();
        showKeyboardConfig(p);
      }
    });
    AlertDialog alert = builder.create();
    alert.setOwnerActivity(p);
    alert.show();
  };

  static void showKeyboardConfig(final MainActivity p)
  {
    final CharSequence[] items = { p.getResources().getString(R.string.controls_arrows),
                                   p.getResources().getString(R.string.controls_trackball),
                                   p.getResources().getString(R.string.controls_accel) };

    AlertDialog.Builder builder = new AlertDialog.Builder(p);
    builder.setTitle(p.getResources().getString(R.string.controls_question));
    builder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface dialog, int item)
      {
        Globals.PhoneHasArrowKeys = (item == 0);
        Globals.PhoneHasTrackball = (item == 1);

        dialog.dismiss();
        if (Globals.PhoneHasArrowKeys )
        {
          // Force arrows only
          Globals.UseAccelerometerAsArrowKeys = false;
          showAudioConfig(p);
        }
        else
          showTrackballConfig(p);
      }
    });
    AlertDialog alert = builder.create();
    alert.setOwnerActivity(p);
    alert.show();
  }

  static void showTrackballConfig(final MainActivity p)
  {
    Globals.TrackballDampening = 0;
    if( ! Globals.PhoneHasTrackball )
    {
      Globals.UseAccelerometerAsArrowKeys = true;
      showAccelerometerConfig(p);
      return;
    }

    final CharSequence[] items = { p.getResources().getString(R.string.trackball_no_dampening),
                                   p.getResources().getString(R.string.trackball_fast),
                                   p.getResources().getString(R.string.trackball_medium),
                                   p.getResources().getString(R.string.trackball_slow) };

    AlertDialog.Builder builder = new AlertDialog.Builder(p);
    builder.setTitle(p.getResources().getString(R.string.trackball_question));
    builder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface dialog, int item)
      {
        Globals.TrackballDampening = item;

        dialog.dismiss();
        showAudioConfig(p);
      }
    });
    AlertDialog alert = builder.create();
    alert.setOwnerActivity(p);
    alert.show();
  }

  static void showAccelerometerConfig(final MainActivity p)
  {
    Globals.AccelerometerSensitivity = 0;
    if( ! Globals.UseAccelerometerAsArrowKeys )
    {
      showAccelerometerCenterConfig(p);
      return;
    }

    final CharSequence[] items = { p.getResources().getString(R.string.accel_fast),
                                   p.getResources().getString(R.string.accel_medium),
                                   p.getResources().getString(R.string.accel_slow) };

    AlertDialog.Builder builder = new AlertDialog.Builder(p);
    builder.setTitle(R.string.accel_question);
    builder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface dialog, int item)
      {
        Globals.AccelerometerSensitivity = item;

        dialog.dismiss();
        showAccelerometerCenterConfig(p);
      }
    });
    AlertDialog alert = builder.create();
    alert.setOwnerActivity(p);
    alert.show();
  }

  static void showAccelerometerCenterConfig(final MainActivity p)
  {
    Globals.AccelerometerSensitivity = 0;
    if( ! Globals.UseAccelerometerAsArrowKeys )
    {
      showAudioConfig(p);
      return;
    }

    final CharSequence[] items = { p.getResources().getString(R.string.accel_floating),
                    p.getResources().getString(R.string.accel_fixed_start),
                    p.getResources().getString(R.string.accel_fixed_horiz) };

    AlertDialog.Builder builder = new AlertDialog.Builder(p);
    builder.setTitle(R.string.accel_question_center);
    builder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface dialog, int item)
      {
        Globals.AccelerometerCenterPos = item;

        dialog.dismiss();
        showAudioConfig(p);
      }
    });
    AlertDialog alert = builder.create();
    alert.setOwnerActivity(p);
    alert.show();
  }

  static void showAudioConfig(final MainActivity p)
  {
    final CharSequence[] items = { p.getResources().getString(R.string.audiobuf_small),
                                   p.getResources().getString(R.string.audiobuf_medium),
                                   p.getResources().getString(R.string.audiobuf_large) };

    AlertDialog.Builder builder = new AlertDialog.Builder(p);
    builder.setTitle(R.string.audiobuf_question);
    builder.setSingleChoiceItems(items, -1, new DialogInterface.OnClickListener()
    {
      public void onClick(DialogInterface dialog, int item)
      {
        Globals.AudioBufferConfig = item;
        dialog.dismiss();
        Save(p);
        startDownloader(p);
      }
    });
    AlertDialog alert = builder.create();
    alert.setOwnerActivity(p);
    alert.show();
  }

  static byte [] loadRaw(Activity p,int res)
  {
    byte [] buf = new byte[128];
    byte [] a = new byte[0];
    try{
      InputStream is = new GZIPInputStream(p.getResources().openRawResource(res));
      int readed = 0;
      while( (readed = is.read(buf)) >= 0 )
      {
        byte [] b = new byte[a.length + readed];
        for(int i = 0; i < a.length; i++)
          b[i] = a[i];
        for(int i = 0; i < readed; i++)
          b[i+a.length] = buf[i];
        a = b;
      }
    } catch(Exception e) {};
    return a;
  }

  static void Apply(Activity p)
  {
    nativeIsSdcardUsed( Globals.DownloadToSdcard ? 1 : 0 );

    if( Globals.PhoneHasTrackball )
      nativeSetTrackballUsed();
    if( Globals.AppUsesMouse )
      nativeSetMouseUsed();
    if( Globals.AppUsesJoystick && !Globals.UseAccelerometerAsArrowKeys )
      nativeSetJoystickUsed();
    if( Globals.AppUsesMultitouch )
      nativeSetMultitouchUsed();
    nativeSetAccelerometerSettings(Globals.AccelerometerSensitivity, Globals.AccelerometerCenterPos);
    nativeSetTrackballDampening(Globals.TrackballDampening);
    String lang = new String(Locale.getDefault().getLanguage());
    if( Locale.getDefault().getCountry().length() > 0 )
      lang = lang + "_" + Locale.getDefault().getCountry();
    System.out.println( "libSDL: setting envvar LANG to '" + lang + "'");
    nativeSetEnv( "LANG", lang );
    // TODO: get current user name and set envvar USER, the API is not availalbe on Android 1.6 so I don't bother with this
  }

  static void startDownloader(MainActivity p)
  {
    class Callback implements Runnable
    {
      public MainActivity Parent;
      public void run()
      {
        Parent.startDownloader();
      }
    }
    Callback cb = new Callback();
    cb.Parent = p;
    p.runOnUiThread(cb);
  };


  private static native void nativeIsSdcardUsed(int flag);
  private static native void nativeSetTrackballUsed();
  private static native void nativeSetTrackballDampening(int value);
  private static native void nativeSetAccelerometerSettings(int sensitivity, int centerPos);
  private static native void nativeSetMouseUsed();
  private static native void nativeSetJoystickUsed();
  private static native void nativeSetMultitouchUsed();
  public static native void nativeSetEnv(final String name, final String value);
}

